apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "kafka-chart.fullname" . }}
  namespace: {{ include "kafka-chart.namespace" . }}
  labels:
    {{- include "kafka-chart.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "kafka-chart.fullname" . }}-headless
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "kafka-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "kafka-chart.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "kafka-chart.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-zookeeper
          image: busybox:1.35
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            readOnlyRootFilesystem: false
          command: ['sh', '-c']
          args:
            - |
              until nc -z {{ include "kafka-chart.fullname" . }}-zookeeper.{{ include "kafka-chart.namespace" . }}.svc.cluster.local 2181; do
                echo "Waiting for Zookeeper..."
                sleep 2
              done
              echo "Zookeeper is ready!"
        - name: setup-kafka-config
          image: busybox:1.35
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            readOnlyRootFilesystem: false
          command: ['sh', '-c']
          args:
            - |
              echo "Setting up Kafka configuration..."
              cp -r /etc/kafka-config/* /etc/kafka-writable/
              echo "Kafka configuration setup complete"
          volumeMounts:
            - name: kafka-config
              mountPath: /etc/kafka-config
            - name: kafka-config-writable
              mountPath: /etc/kafka-writable
      containers:
        - name: kafka
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: kafka
              containerPort: 9092
              protocol: TCP
            - name: kafka-external
              containerPort: 9093
              protocol: TCP
          env:
            - name: KAFKA_BROKER_ID
              value: "0"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "{{ include "kafka-chart.fullname" . }}-zookeeper.{{ include "kafka-chart.namespace" . }}.svc.cluster.local:2181"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "{{ include "kafka-chart.advertisedListeners" . }}"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
            - name: KAFKA_LOG_DIRS
              value: "/var/lib/kafka/data"
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_DEFAULT_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_MIN_INSYNC_REPLICAS
              value: "1"
          livenessProbe:
            tcpSocket:
              port: 9092
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 9092
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: kafka-config-writable
              mountPath: /etc/kafka
            - name: kafka-secrets
              mountPath: /etc/kafka/secrets
            {{- if .Values.persistence.enabled }}
            - name: kafka-data
              mountPath: /var/lib/kafka/data
            {{- else }}
            - name: kafka-data-temp
              mountPath: /var/lib/kafka/data
            {{- end }}
      volumes:
        - name: kafka-config
          configMap:
            name: {{ include "kafka-chart.fullname" . }}-config
        - name: kafka-config-writable
          emptyDir: {}
        - name: kafka-secrets
          emptyDir: {}
        {{- if not .Values.persistence.enabled }}
        - name: kafka-data-temp
          emptyDir: {}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: kafka-data
      labels:
        {{- include "kafka-chart.labels" . | nindent 8 }}
      {{- with .Values.persistence.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      accessModes:
        - {{ .Values.persistence.accessMode }}
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
      {{- if .Values.persistence.storageClass }}
      storageClassName: {{ .Values.persistence.storageClass }}
      {{- end }}
  {{- end }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "kafka-chart.fullname" . }}-config
  namespace: {{ include "kafka-chart.namespace" . }}
  labels:
    {{- include "kafka-chart.labels" . | nindent 4 }}
data:
  server.properties: |
    # Broker ID
    broker.id={{ .Values.kafka.brokerId }}
    
    # Listeners
    listeners={{ .Values.kafka.listeners }}
    advertised.listeners={{ include "kafka-chart.advertisedListeners" . }}
    listener.security.protocol.map={{ .Values.kafka.listenerSecurityProtocolMap }}
    inter.broker.listener.name={{ .Values.kafka.interBrokerListenerName }}
    
    # Log configuration
    log.dirs={{ .Values.kafka.logDirs }}
    log.retention.hours={{ .Values.kafka.logRetentionHours }}
    log.segment.bytes={{ .Values.kafka.logSegmentBytes }}
    log.retention.check.interval.ms={{ .Values.kafka.logRetentionCheckIntervalMs }}
    
    # Replication configuration
    default.replication.factor={{ .Values.kafka.defaultReplicationFactor }}
    min.insync.replicas={{ .Values.kafka.minInsyncReplicas }}
    offsets.topic.replication.factor={{ .Values.kafka.offsetsTopicReplicationFactor }}
    transaction.state.log.replication.factor={{ .Values.kafka.transactionStateLogReplicationFactor }}
    transaction.state.log.min.isr={{ .Values.kafka.transactionStateLogMinIsr }}
    
    # Performance tuning
    num.network.threads={{ .Values.kafka.numNetworkThreads }}
    num.io.threads={{ .Values.kafka.numIoThreads }}
    socket.send.buffer.bytes={{ .Values.kafka.socketSendBufferBytes }}
    socket.receive.buffer.bytes={{ .Values.kafka.socketReceiveBufferBytes }}
    socket.request.max.bytes={{ .Values.kafka.socketRequestMaxBytes }}
    num.partitions={{ .Values.kafka.numPartitions }}
    
    # Zookeeper configuration
    zookeeper.connect={{ include "kafka-chart.fullname" . }}-zookeeper:2181
    zookeeper.connection.timeout.ms=18000
    
    # Auto topic creation
    auto.create.topics.enable=true
    
    # Logging
    log4j.rootLogger=INFO, stdout
    log4j.appender.stdout=org.apache.log4j.ConsoleAppender
    log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
    log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n

  zookeeper.properties: |
    # Zookeeper configuration
    dataDir={{ .Values.zookeeper.dataDir }}
    dataLogDir={{ .Values.zookeeper.dataLogDir }}
    tickTime={{ .Values.zookeeper.tickTime }}
    initLimit={{ .Values.zookeeper.initLimit }}
    syncLimit={{ .Values.zookeeper.syncLimit }}
    maxClientCnxns={{ .Values.zookeeper.maxClientCnxns }}
    autopurge.snapRetainCount={{ .Values.zookeeper.autopurgeSnapRetainCount }}
    autopurge.purgeInterval={{ .Values.zookeeper.autopurgePurgeInterval }}
    
    # Server configuration (single instance)
    {{- if eq (int .Values.replicaCount) 1 }}
    # Single Zookeeper instance - no server configuration needed
    {{- else }}
    server.1={{ include "kafka-chart.fullname" . }}-zookeeper-0.{{ include "kafka-chart.fullname" . }}-zookeeper-headless:2888:3888
    server.2={{ include "kafka-chart.fullname" . }}-zookeeper-1.{{ include "kafka-chart.fullname" . }}-zookeeper-headless:2888:3888
    server.3={{ include "kafka-chart.fullname" . }}-zookeeper-2.{{ include "kafka-chart.fullname" . }}-zookeeper-headless:2888:3888
    {{- end }}

  create-topics.sh: |
    #!/bin/bash
    set -e
    
    # Wait for Kafka to be ready
    echo "Waiting for Kafka to be ready..."
    until kafka-topics --bootstrap-server 127.0.0.1:9092 --list > /dev/null 2>&1; do
      echo "Kafka not ready yet, waiting..."
      sleep 5
    done
    
    echo "Kafka is ready, creating topics..."
    
    # Create Alpha Queue
    echo "Creating alpha-queue topic..."
    kafka-topics --bootstrap-server 127.0.0.1:9092 \
      --create \
      --topic alpha-queue \
      --partitions {{ index .Values.kafka.topics "alpha-queue" "partitions" }} \
      --replication-factor {{ index .Values.kafka.topics "alpha-queue" "replicationFactor" }} \
      --config cleanup.policy={{ index .Values.kafka.topics "alpha-queue" "config" "cleanup.policy" }} \
      --config retention.ms={{ index .Values.kafka.topics "alpha-queue" "config" "retention.ms" }} \
      --config segment.ms={{ index .Values.kafka.topics "alpha-queue" "config" "segment.ms" }} \
      --if-not-exists
    
    # Create Beta Queue
    echo "Creating beta-queue topic..."
    kafka-topics --bootstrap-server 127.0.0.1:9092 \
      --create \
      --topic beta-queue \
      --partitions {{ index .Values.kafka.topics "beta-queue" "partitions" }} \
      --replication-factor {{ index .Values.kafka.topics "beta-queue" "replicationFactor" }} \
      --config cleanup.policy={{ index .Values.kafka.topics "beta-queue" "config" "cleanup.policy" }} \
      --config retention.ms={{ index .Values.kafka.topics "beta-queue" "config" "retention.ms" }} \
      --config segment.ms={{ index .Values.kafka.topics "beta-queue" "config" "segment.ms" }} \
      --if-not-exists
    
    echo "Topics created successfully!"
    
    # List all topics
    echo "Current topics:"
    kafka-topics --bootstrap-server 127.0.0.1:9092 --list
